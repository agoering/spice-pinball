#include <Pinball.h>

#include "mysongs.h"

Pb_display disp(10, 8, 9);  // (datapin, clkpin, latchpin)

Pb_muxin mymux(2, 3, 4, 7); // (pinA, pinB, pinC, COMpin)

int num, flag0, flag1, flag2, flag3;

Pb_switch mysw0(50), mysw1(50), mysw2(50), mysw3(50);


Pb_speaker spkr(14);

Pb_outputs shregs(11, 12, 13, 2);   // (datapin, clkpin, latchpin, numreg)


Pb_timedevent dothat(lednotes);

void setup() {

  disp.print_number(0);
  
  num = 0;
  flag0 = 0; flag1 = 0; flag2 = 0; flag3 = 0;
  
  lednotes(0);
  
}


void loop() {

  readinputs();       // Read all the input sensors
  dologic();          // Perform logical operations
  writeoutputs();     // Control all output components
  
}


void readinputs() {

  flag0 = 0; flag1 = 0; flag2 = 0; flag3 = 0;
  
  // Use flags to record which switches have been pushed
  flag0 = mysw0.pushed( mymux.probe(0) );
  flag1 = mysw1.pushed( mymux.probe(1) );
  flag2 = mysw2.pushed( mymux.probe(2) );  
  flag3 = mysw3.pushed( mymux.probe(3) );    
  
}


void dologic() {
  
  if (flag0 == 1) {   // If switch 0 has been pushed, decrease number
    num = num - 1;
    if (num < 0) {
      num = 0;
    }
  }
  
  
  if (flag2 == 1) {  // If switch 2 has been pushed, increase number
    num = num + 1;
    if (num > 99) {
      num = 99;
    }      
  }
}


void writeoutputs() {

  spkr.update();
  dothat.update();
  
  if ( (flag0 + flag2) > 0 ) {  
     disp.print_number(num);            // Output the number to the scoreboard
  }
  
  if (flag1 == 1) {
    playsong(num);
  }
  
  
  if (flag3 == 1) {
      spkr.stop();
      dothat.stop();
  }
  
}


void playsong(int n) {
 
 if (n == 1) { spkr.start(melody1, timing1, 9); dothat.start(melody1, timing1, 9); } 
 else if (n == 2) { spkr.start(melody2, timing2, 3); dothat.start(melody2, timing2, 3); } 
 else if (n == 3) { spkr.start(melody3, timing3, 12); dothat.start(melody3, timing3, 12); } 
 else if (n == 4) { spkr.start(marionotes2, mariotimes2, 61); dothat.start(marionotes2, mariotimes2, 61); }  
 else { spkr.stop(); dothat.stop(); lednotes(0); }
  
}

void lednotes(int note) {
 
 byte serdata[] = { 0b00000000, 0b00000000 } ;
 
 
 if ( note < NOTE_G1) { // do nothing 
 } 
 else if ( note < NOTE_C2 ) { bitWrite(serdata[1], 0, 1); }
 else if ( note < NOTE_DS2 ) { bitWrite(serdata[1], 1, 1); }
 else if ( note < NOTE_FS2 ) { bitWrite(serdata[1], 2, 1); }
 else if ( note < NOTE_B2 ) { bitWrite(serdata[1], 3, 1); }
 else if ( note < NOTE_C3 ) { bitWrite(serdata[1], 4, 1); }
 else if ( note < NOTE_CS3 ) { bitWrite(serdata[1], 5, 1); }
 else if ( note < NOTE_D3 ) { bitWrite(serdata[1], 6, 1); }
 else if ( note < NOTE_DS3 ) { bitWrite(serdata[1], 7, 1); }
 else if ( note < NOTE_E3 ) { bitWrite(serdata[0], 0, 1); }
 else if ( note < NOTE_F3 ) { bitWrite(serdata[0], 1, 1); }
 else if ( note < NOTE_FS3 ) { bitWrite(serdata[0], 2, 1); }
 else if ( note < NOTE_G3 ) { bitWrite(serdata[0], 3, 1); }
 else if ( note < NOTE_A3 ) { bitWrite(serdata[0], 4, 1); }
 else if ( note < NOTE_AS3 ) { bitWrite(serdata[0], 5, 1); }
 else if ( note < NOTE_B3 ) { bitWrite(serdata[0], 6, 1); }
 else  { bitWrite(serdata[0], 7, 1); }
 
 shregs.update(serdata); 
  
}
